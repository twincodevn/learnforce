// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  name          String?
  image         String?
  password      String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Gamification fields
  xp            Int       @default(0)
  level         Int       @default(1)
  streak        Int       @default(0)
  lastActiveAt  DateTime?
  totalLessons  Int       @default(0)
  totalTime     Int       @default(0) // in minutes

  // Relationships
  progress      UserProgress[]
  achievements  UserAchievement[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  lessons     Lesson[]
  progress    UserProgress[]

  @@map("subjects")
}

model Lesson {
  id          String   @id @default(cuid())
  subjectId   String
  title       String
  description String?
  content     String   // Store lesson content as JSON string
  order       Int      @default(0)
  xpReward    Int      @default(10)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  progress    UserProgress[]

  @@map("lessons")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  subjectId   String
  lessonId    String?
  completed   Boolean  @default(false)
  score       Int?     // Score out of 100
  timeSpent   Int?     // in seconds
  xpEarned    Int      @default(0)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId, lessonId])
  @@map("user_progress")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String?
  category    String   // 'streak', 'xp', 'lessons', 'time', 'special'
  requirement Int      // Required value to unlock
  xpReward    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relationships
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  // Relationships
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Leaderboard {
  id        String   @id @default(cuid())
  userId    String
  xp        Int
  level     Int
  streak    Int
  rank      Int
  period    String   // 'daily', 'weekly', 'monthly', 'all_time'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, period])
  @@map("leaderboards")
}
